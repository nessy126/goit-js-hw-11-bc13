{"version":3,"sources":["fetchImages.js","index.js"],"names":["fetchImages","q","page","perPage","orientation","fetch","then","data","json","formEl","document","querySelector","galleryEl","loadMoreBtn","disabled","elements","searchQuery","value","renderMarkup","console","log","markup","hits","map","webformatURL","largeImageURL","tags","likes","views","comments","downloads","join","insertAdjacentHTML","onLoad","e","preventDefault","length","alert","onLoadMore","addEventListener","window","pageYOffset","offsetHeight","contentHeight","block","innerHeight"],"mappings":";;;AAWC,aATc,SAASA,EAAYC,EAAGC,EAAO,EAAGC,EAAU,GAAIC,EAAc,cAIpEC,OAAAA,2EAC2BJ,kCAAkCG,0BAAoCF,cAAiBC,KAExHG,KAAKC,GAAQA,EAAKC,QAEpB,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA;;ACgFD,aA3FA,QAAA,oBAEA,IAAA,EAAA,EAAA,QAAA,kBAyFA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAtFA,MAAMC,EAASC,SAASC,cAAc,QAChCC,EAAYF,SAASC,cAAc,YACnCE,EAAcH,SAASC,cAAc,cAC3CE,EAAYC,UAAW,EACvB,MAAMV,EAAc,aACpB,IAAIF,EAAO,EACX,MAAMC,EAAU,GACVF,EAAIQ,EAAOM,SAASC,YAAYC,MAGhCC,EAAeX,IACnBY,QAAQC,IAAIb,GACFc,MAAAA,EAASd,EAAKe,KACjBC,IAAI,EAAGC,aAAAA,EAAcC,cAAAA,EAAeC,KAAAA,EAAMC,MAAAA,EAAOC,MAAAA,EAAOC,SAAAA,EAAUC,UAAAA,8CAE7DN,WAAsBE,4FAGhBC,6DAGAC,gEAGGC,iEAGCC,mCAIfC,OACPnB,EAAUoB,mBAAmB,YAAaX,GAC1CR,EAAYC,UAAW,GAGnBmB,EAAS,MAAA,IACbC,EAAEC,iBACFjC,EAAO,IACDK,MAAAA,QAAa,EAAYN,EAAAA,SAAAA,EAAGC,EAjCpB,GAiCmCE,GAC7B,IAAhBG,EAAK6B,QAITjB,QAAQC,IAAIb,GACZW,EAAaX,IAJX8B,MAAM,6EAOJC,EAAa,UACX/B,MAAAA,QAAa,EAAYN,EAAAA,SAAAA,IAAKC,EA3CtB,GA2CqCE,GAC/B,IAAhBG,EAAK6B,OAIPlB,EAAaX,GAHb8B,MAAM,6EAOV5B,EAAO8B,iBAAiB,SAAUN,GAClCpB,EAAY0B,iBAAiB,QAASD,GAEtCE,OAAOD,iBAAiB,SAAU,SAAUL,GAC1Cf,QAAQC,IAAIoB,OAAOC,aACnBtB,QAAQC,IAAIR,EAAU8B,cAEhBC,MAAAA,EAAgBC,MAAMF,aACZF,OAAOC,YACDD,OAAOK,aAGpBF,GAAgBL","file":"src.f939c12f.js","sourceRoot":"../src","sourcesContent":["// const axios = require('axios').default;\n\nexport default function fetchImages(q, page = 1, perPage = 40, orientation = 'horizontal') {\n  const BASE_URL = 'https://pixabay.com/api/';\n  const KEY_API = '25273711-e95d23ce228d19c821de1faa8';\n\n  return fetch(\n    `${BASE_URL}?key=${KEY_API}&q=${q}&image_type=photo&orientation=${orientation}&safesearch=true&page=${page}&per_page=${perPage}`,\n  )\n  .then(data => data.json());\n  //axios#get(url[, config])\n}\n","import './sass/main.scss';\n\nimport fetchImages from './fetchImages';\n// const InfiniteScroll = require('infinite-scroll');\n\nconst formEl = document.querySelector('form');\nconst galleryEl = document.querySelector('.gallery');\nconst loadMoreBtn = document.querySelector('.load-more');\nloadMoreBtn.disabled = true;\nconst orientation = 'horizontal';\nlet page = 1;\nconst perPage = 40;\nconst q = formEl.elements.searchQuery.value;\n\n\nconst renderMarkup = data => {\n  console.log(data)\n      const markup = data.hits\n        .map(({ webformatURL, largeImageURL, tags, likes, views, comments, downloads }) =>\n  `<div class=\"photo-card\">\n  <img src=\"${webformatURL}\" alt=\"${tags}\" loading=\"lazy\" />\n  <div class=\"info\">\n    <p class=\"info-item\">\n      <b>Likes</b>${likes}\n    </p>\n    <p class=\"info-item\">\n      <b>Views</b>${views}\n    </p>\n    <p class=\"info-item\">\n      <b>Comments</b>${comments}\n    </p>\n    <p class=\"info-item\">\n      <b>Downloads</b>${downloads}\n    </p>\n  </div>\n  </div>`)\n        .join();\n  galleryEl.insertAdjacentHTML('beforeend', markup);\n  loadMoreBtn.disabled = false;\n}\n\nconst onLoad = async (e) => {\n  e.preventDefault();\n  page = 500;\n  const data = await fetchImages(q, page, perPage, orientation);\n  if (data.length === 0) {\n    alert('Sorry, there are no images matching your search query. Please try again.');\n    return\n  }\n  console.log(data)\n  renderMarkup(data)\n}\n\nconst onLoadMore = async () => {\n  const data = await fetchImages(q, ++page, perPage, orientation);\n  if (data.length === 0) {\n    alert('Sorry, there are no images matching your search query. Please try again.');\n    return;\n  }\n    renderMarkup(data);\n  ;\n}\n\nformEl.addEventListener('submit', onLoad);\nloadMoreBtn.addEventListener('click', onLoadMore)\n\nwindow.addEventListener('scroll', function (e) {\n  console.log(window.pageYOffset); //текущее положение скрола\n  console.log(galleryEl.offsetHeight); //высота гэлЭл\n\n  const contentHeight = block.offsetHeight; // 1) высота блока контента вместе с границами\n  const yOffset = window.pageYOffset; // 2) текущее положение скролбара\n  const window_height = window.innerHeight; // 3) высота внутренней области окна документа\n  const y = yOffset + window_height;\n\n  if (y >= contentHeight)  onLoadMore();\n  // если пользователь достиг конца\n\n  // if (window.pageYOffset - 300 <= galleryEl.offsetHeight)\n});\n\n// function onScroll(q, orientation, page = 1, perPage) {}\n\n// let infScroll = new InfiniteScroll(galleryEl, {\n//   // options\n//   path: '.load-more',\n//   append: \".photo-card\",\n//   history: false,\n// });\n\n// element argument can be a selector string\n//   for an individual element\n"]}